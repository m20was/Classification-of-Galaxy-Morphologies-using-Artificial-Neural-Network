package FormPack;

import ANN.NeuralNetwork;
import DataPack.Blob;
import DataPack.Blobs;
import FeaturePack.SingleFeatures;
import java.awt.*;
import javax.swing.*;
import java.awt.image.*;
import java.io.*;
import java.util.TimerTask;
import java.util.Vector;
import javax.imageio.*;

/**
 *
 * @author Ravee
 */
public class Training extends javax.swing.JFrame {

    BufferedImage thumbImage, thumbImage2;
    Graphics2D graphics2D, graphics2D2;
    int w, h;
    ImageIcon ii1, ii2;
    int inPixels[][], outPixels[][];
    public int maxX, maxY, minX, minY;
    Blobs blobs;
    MainForm parent;
    public String folderPath;
    java.util.Timer timer;
    File[] listOfFiles;
    String name = "";
    Vector<String> names;
   int totalOutput;
    /**
     * Creates new form Demo
     */
    public Training(MainForm parent) {
        initComponents();
        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);

        this.parent = parent;
        jComboTh.removeAllItems();
        for (int i = 0; i <= 255; i++) {
            jComboTh.addItem("" + i);
        }
        jComboTh.setSelectedIndex(40);

        jComboHeight.removeAllItems();
        jComboWidth.removeAllItems();
        for (int i = 0; i < 200; i++) {
            jComboHeight.addItem("" + i);
            jComboWidth.addItem("" + i);
        }

        jComboHeight.setSelectedIndex(40);
        jComboWidth.setSelectedIndex(40);

        blobs = new Blobs();
        names = new Vector<String>();
        names.add("Circular");
        names.add("Elliptical");
        names.add("Others");


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jComboTh = new javax.swing.JComboBox();
        jComboWidth = new javax.swing.JComboBox();
        jComboHeight = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jRadioBlackBlob = new javax.swing.JRadioButton();
        jRadioWhiteBlob = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabelIn = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabelOut = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton2 = new javax.swing.JButton();
        jLabelStatus = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jProgressBar2 = new javax.swing.JProgressBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(222, 232, 242));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithms & Operations"));

        jComboTh.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboWidth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboHeight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Min Width");

        jLabel3.setText("Min Height");

        jLabel4.setText("Threshold");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioBlackBlob);
        jRadioBlackBlob.setText("Black Blob");

        buttonGroup1.add(jRadioWhiteBlob);
        jRadioWhiteBlob.setSelected(true);
        jRadioWhiteBlob.setText("White Blob");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jComboTh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(101, 101, 101)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jComboWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jComboHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRadioBlackBlob)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRadioWhiteBlob)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton1)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jRadioBlackBlob)
                        .add(jRadioWhiteBlob))
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel4)
                        .add(jComboTh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel2)
                        .add(jComboWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel3)
                        .add(jComboHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Training");
        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabelIn.setBackground(new java.awt.Color(102, 102, 102));
        jLabelIn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelIn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportView(jLabelIn);

        jLabelOut.setBackground(new java.awt.Color(102, 102, 102));
        jLabelOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOut.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane2.setViewportView(jLabelOut);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 438, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1))
                .addContainerGap())
        );

        jButton2.setText("Load Training Set");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jButton3.setText("Apply Training");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 351, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jProgressBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 349, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                    .add(jLabelStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .add(jProgressBar2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(37, 37, 37))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        setVisible(false);
        parent.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    void delay(int time) {
        try {
            Thread.sleep(time);
        } catch (Exception e) {
        }
    }

    class MyTimerTask extends TimerTask {

        @Override
        public void run() {
            //for(int i=0;i<26;i++){
            jProgressBar1.setIndeterminate(true);

            parent.db.featureSet.clear();
            for (String s : names) {
                SingleFeatures sf = new SingleFeatures();
                String newPath = folderPath + "\\" + s;
                System.out.println("Current Folder Path: " + newPath);
                File subFolderPath = new File(newPath);
                listOfFiles = subFolderPath.listFiles();
                // System.out.println(s + "  --  " + listOfFiles.length);
                for (int i = 0; i < listOfFiles.length; i++) {

                    String fname = subFolderPath + "\\" + (listOfFiles[i].getName());
                    jLabelStatus.setText("Found character: " + (s));
                    delay(50);

                    if (new File(fname).exists()) {
                        //jLabelStatus.setText("File found!......Processing...");
                        try {
                            thumbImage = ImageIO.read(new File(fname));
                            graphics2D = thumbImage.createGraphics();
                            graphics2D.drawImage(thumbImage, 0, 0, w, h, null);
                            jLabelIn.repaint();
                            w = thumbImage.getWidth();
                            h = thumbImage.getHeight();

                            thumbImage2 = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
                            graphics2D2 = thumbImage2.createGraphics();
                            inPixels = new int[h][w];
                            outPixels = new int[h][w];

                            for (int yy = 0; yy < h; yy++) {
                                for (int xx = 0; xx < w; xx++) {
                                    inPixels[yy][xx] = thumbImage.getRGB(xx, yy) & 0xffffff;
                                    outPixels[yy][xx] = 0;
                                }
                            }

                            jLabelIn.setIcon(new ImageIcon(thumbImage));
                            jLabelOut.setIcon(new ImageIcon(thumbImage2));


                            int col, r, g, b, gs;
                            int th = jComboTh.getSelectedIndex();

                            for (int y = 0; y < h; y++) {
                                for (int x = 0; x < w; x++) {
                                    col = inPixels[y][x];

                                    b = col & 0xff;
                                    g = (col >> 8) & 0xff;
                                    r = (col >> 16) & 0xff;

                                    gs = (r + g + b) / 3;
                                    if (gs < th) {
                                        gs = 0;
                                    } else {
                                        gs = 255;
                                    }
                                    outPixels[y][x] = (gs | (gs << 8) | (gs << 16));
                                    thumbImage2.setRGB(x, y, outPixels[y][x]);
                                }
                            }


                            // call to find blob
                            if (jRadioWhiteBlob.isSelected()) {
                                blobs.findBlobs(outPixels, w, h, 0xFFFFFF, jComboWidth.getSelectedIndex(), jComboHeight.getSelectedIndex(), -1, -1);
                            } else {
                                blobs.findBlobs(outPixels, w, h, 0, jComboWidth.getSelectedIndex(), jComboHeight.getSelectedIndex(), -1, -1);
                            }

                            //  System.out.println("Total Blobs Detected: " + blobs.size());

                            for (int ii = 0; ii < blobs.size(); ii++) {
                                Blob bl = blobs.get(ii);
                                if (bl.x1 == -1) {
                                    continue;
                                }
                                int currW = bl.getWidth();
                                int currH = bl.getHeight();
                                double aspectRatio = 0.0;
                                if (currH > currW) {
                                    aspectRatio = (currW * 1.0 / currH);
                                } else {
                                    aspectRatio = (currH * 1.0 / currW);
                                }
                                sf.H = bl.getHeight();
                                sf.W = bl.getWidth();
                                sf.aspectRatio = aspectRatio;

                                int blackCnt = 0;
                                int whiteCnt = 0;


                                for (int yy = bl.y1; yy < bl.y1 + currH; yy++) {
                                    for (int xx = bl.x1; xx < bl.x1 + currW; xx++) {
                                        col = outPixels[yy][xx] & 0xff;
                                        //  System.out.println("COL: "+col);
                                        if (col == 0) {
                                            blackCnt++;
                                        } else {
                                            whiteCnt++;
                                        }

                                    }

                                }
                                sf.blackCnt = blackCnt;
                                sf.whiteCnt = whiteCnt;
                                sf.whitePerCnt = ((whiteCnt * 1.0 ) / (currW * currH));
                                sf.blackPerCnt = ((blackCnt * 1.0 ) / (currW * currH));

                                System.out.println("Features:  " + get3Decimal(sf.aspectRatio) + "    " + get3Decimal(sf.blackPerCnt) + "    " + get3Decimal(sf.whitePerCnt) + "   " + whiteCnt + "    " + blackCnt);
                                if (s.equals("Circular")) {
                                    sf.output = 0;
                                } else if (s.equals("Elliptical")) {
                                    sf.output = 1;

                                } else {
                                    sf.output = 2;
                                }
                                parent.db.featureSet.add(sf);

//
//                                String out = "";
//                                if (aspectRatio < 0.9) {
//                                    System.out.println("Found Elliptical Object " + aspectRatio);
//                                    out = "Elliptical";
//
//                                } else if (aspectRatio >= 0.9 && aspectRatio <= 1.20) {
//                                    System.out.println("Found Sperical Object  " + aspectRatio);
//                                    out = "Sperical";
//
//                                } else {
//                                    System.out.println("Others  " + aspectRatio);
//                                    out = "Others";
//
//                                }

                                graphics2D2.setColor(Color.red);
                                graphics2D2.drawRect(bl.x1, bl.y1, bl.getWidth(), bl.getHeight());
                                //System.out.println(" " + out.toCharArray().length);
                                //graphics2D2.drawString(out, bl.x1, bl.y1);
                            }
                            jLabelOut.repaint();




                            delay(1000);






                        } catch (Exception e) {
                            System.out.println("Exception : " + e);
                            e.printStackTrace();
                        }
                    } else {
                        jLabelStatus.setText("Searching file for character " + ((char) (i + 65)) + ".........File not found!");
                        //delay(10);
                    }

                }

                //parent.cs.charList.add(sc);
            }

            parent.writeTo();
            jLabelStatus.setText("Read All charcters!");

            jProgressBar1.setIndeterminate(false);
            parent.writeTo();


        }
    }

    double get3Decimal(double decimal) {

        int d = (int) (decimal * 1000);
        double dd = (d * 1.0) / 1000;
        return dd;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        j.setCurrentDirectory(new File(System.getProperty("user.dir") + "//DataSet"));
        j.showOpenDialog(this);
        folderPath = j.getSelectedFile().getPath();

        MyTimerTask task = new MyTimerTask();
        timer = new java.util.Timer();
        timer.schedule(task, 100);
    }//GEN-LAST:event_jButton2ActionPerformed
class TrainTimerTask extends TimerTask {
        
        NeuralNetwork nn;
        
        @Override
        public void run() {
            jProgressBar2.setIndeterminate(true);
            nn = null;
            totalOutput = 3;
            int layers[] = new int[3];
            layers[0] = 3;
            layers[1] = 3 + 1;
            layers[2] = totalOutput;
            long iter = 10000;
            double per = 0;
            int tp, fp;
            tp = fp = 0;
            double tr_inp[][] = null;
            double tr_out[][];
            int iteration = 0;
            while (per < 80) {
                iteration++;
                System.out.println("True Positive:  " + per + "  Iteration " + iteration);
                tp = fp = 0;
                nn = new NeuralNetwork(0.1, 3, layers);
                tr_inp = new double[parent.db.featureSet.size() ][3];
                tr_out = new double[parent.db.featureSet.size()][totalOutput];
                tr_inp = fillInputFeature();
                tr_out = fillOutputFeature();
                
                try {
                    for (int i = 0; i < iter; i++) {
                        for (int j = 0; j < tr_inp.length; j++) {
                            nn.train(tr_inp[j], tr_out[j]);
                        }
                        
                    }
                } catch (Exception e) {
                    System.out.println("Error  ::" + e);
                    e.printStackTrace();
                }
                
                for (int i = 0; i < tr_inp.length; i++) {
                    
                    nn.setInputs(tr_inp[i]);
                    double curr_out_D[] = nn.runNetwork();
                    int output = convertToInt(curr_out_D);
                  //  System.out.println("OP: " + output + "  (" + tr_out[i][output] + ")");
                    if (tr_out[i][output] == 1.0) {
                        tp++;
                    } else {
                        fp++;
                    }
                    
                }
                per = (tp * 100 * 1.0) / tr_inp.length;
                jTextArea1.setText("Total Percent:  " + per);
                System.out.println("True Positive:  " + per);
                // parent.clearText("");
            }
            
            
            System.out.println("True Positive:  " + (tp * 100 * 1.0) / tr_inp.length);
            System.out.println("False Positive:  " + (fp * 100 * 1.0) / tr_inp.length);
            
            try {
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir") + "\\train.dat")));
                out.writeObject(nn);
                out.close();
                
            } catch (Exception e) {
                System.out.println("Error: " + e);
                
            }

            //parent.addText("Done Training.");

            
            jProgressBar2.setIndeterminate(false);
            
        }
    }
    
    public int convertToInt(double outD[]) {
        int outI[] = new int[outD.length];
        double max = 0.0;
        int index = 0;
        for (int i = 0; i < outD.length; i++) {
            if (outD[i] > max) {
                max = outD[i];
                index = i;
            }
        }
        return index;
    }
    
    public double[][] fillInputFeature() {
        double ip[][] = new double[parent.db.featureSet.size()][totalOutput];
        int rowIndex = 0;
        //System.out.println("Char Size: " + parent.cs.charList.size());
        for (int i = 0; i < parent.db.featureSet.size(); i++) {
            SingleFeatures sc = parent.db.featureSet.get(i);
                ip[i][0]=sc.aspectRatio;
                ip[i][1]=sc.blackPerCnt;
                ip[i][2]=sc.whitePerCnt;
        }
        return ip;
        
        
    }
    
    public double[][] fillOutputFeature() {
        double op[][] = new double[parent.db.featureSet.size()][totalOutput];
        for (int i = 0; i < parent.db.featureSet.size(); i++) {
            for (int j = 0; j < totalOutput; j++) {
                op[i][j] = 0;
            }
        }
        
        for (int i = 0; i < parent.db.featureSet.size(); i++) {
            SingleFeatures sf= parent.db.featureSet.get(i);
                op[i][sf.output] = 1;
        }
        
        return op;
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        TrainTimerTask tt = new TrainTimerTask();
       java.util.Timer trainTimer = new java.util.Timer();
        //Timer trainTimer = new Timer();
        trainTimer.schedule(tt, 100);
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboHeight;
    private javax.swing.JComboBox jComboTh;
    private javax.swing.JComboBox jComboWidth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelIn;
    private javax.swing.JLabel jLabelOut;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JRadioButton jRadioBlackBlob;
    private javax.swing.JRadioButton jRadioWhiteBlob;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
